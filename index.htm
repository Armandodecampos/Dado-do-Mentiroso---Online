<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login com Supabase</title>
    <!-- Carrega o Tailwind CSS para estilização rápida e responsiva -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Adiciona Font Awesome para os ícones -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" xintegrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;900&display=swap');
        :root {
            --text-primary: #1f2937; /* Default: Tailwind gray-800 */
        }
        body {
            font-family: 'Inter', sans-serif;
            @apply bg-gray-100;
        }
        .text-theme {
            color: var(--text-primary);
        }
        .shopping-list-item {
            @apply flex items-center justify-between p-3 border-b border-gray-200;
        }
        .shopping-list-item:last-child {
            @apply border-b-0;
        }
        .editable-item {
            @apply outline-none focus:ring-2 focus:ring-indigo-500 rounded-md;
        }
        .item-checked {
            @apply bg-green-200;
        }
        /* Estilos para a grade de botões arrastáveis */
        #button-grid-container {
            display: flex;
            flex-direction: column; /* Organiza os apps em uma coluna */
            align-items: flex-start; /* Alinha os apps à esquerda */
            gap: 16px; /* Espaçamento entre os apps */
        }
        .app-container {
            display: flex;
            flex-direction: row; /* Ícone e texto lado a lado */
            align-items: center; /* Alinha verticalmente o ícone e o texto */
            width: 100%; /* Ocupa a largura total */
            gap: 16px; /* Espaço entre o ícone e o texto */
        }
        #button-grid-container .grid-item {
            background-color: #333;
            width: 56px;
            height: 56px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease-in-out;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
            flex-shrink: 0;
        }
        /* NOVO: Estilo para o ícone do app selecionado */
        #button-grid-container .grid-item.selected {
            transform: scale(1.15);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.2), 0 4px 6px -4px rgba(0, 0, 0, 0.1);
        }
        .grid-item-icon {
            font-size: 1.5rem;
            color: white;
        }
        .grid-item-label {
            @apply font-semibold text-gray-700 text-base text-left; /* Texto maior e alinhado à esquerda */
            flex-grow: 1; /* Permite que o texto ocupe o espaço restante */
            margin-top: 0;
        }
        .app-container.dragging {
            @apply opacity-50 bg-gray-300;
        }
        /* Estilos para as Notas */
        .note-item {
            background-color: #FEF3C7;
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
            padding: 15px;
            @apply rounded-lg aspect-square flex flex-col justify-between transition-transform duration-200 cursor-pointer;
        }
        .note-item:hover {
            @apply scale-105;
        }
        .note-title {
             @apply font-bold text-lg truncate mb-2;
             color: var(--text-primary);
        }
        .note-content-preview {
            min-width: 0;
            word-wrap: break-word;
            overflow: hidden;
            display: -webkit-box;
            -webkit-line-clamp: 5; /* Limita o texto a 5 linhas */
            -webkit-box-orient: vertical;
            text-overflow: ellipsis;
            @apply flex-grow text-left;
            font-family: 'Inter', sans-serif;
            font-size: 1rem;
            color: var(--text-primary);
        }
        .note-actions {
            display: flex;
            justify-content: space-between;
            width: 100%;
            align-items: center;
            padding-top: 0.5rem;
        }
        .note-button {
            @apply cursor-pointer;
        }
        .icon-picker-item {
            @apply cursor-pointer text-2xl text-gray-600 p-2 rounded-md hover:bg-gray-200 text-center;
        }
        .icon-picker-item.selected {
            @apply bg-indigo-500 text-white;
        }
        /* Estilos para o App de Receitas */
        .recipe-item {
            @apply bg-white rounded-lg shadow-md overflow-hidden transition-transform duration-200 cursor-pointer flex flex-col;
        }
        .recipe-item:hover {
            @apply scale-105 shadow-xl;
        }
        .recipe-image {
            width: 100%;
            height: 150px;
            object-fit: cover;
            @apply bg-gray-200;
        }
        .recipe-content-preview {
            min-width: 0;
            word-wrap: break-word;
            overflow: hidden;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            text-overflow: ellipsis;
            @apply text-sm;
            color: var(--text-primary);
        }
        .image-preview-item {
            @apply relative w-24 h-24 rounded-md overflow-hidden;
        }
        .image-preview-item img {
            @apply w-full h-full object-cover;
        }
        .remove-image-btn {
            @apply absolute top-1 right-1 bg-red-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs font-bold cursor-pointer;
        }
        .noselect {
            -webkit-touch-callout: none; /* iOS Safari */
            -webkit-user-select: none;   /* Safari */
            -khtml-user-select: none;    /* Konqueror HTML */
            -moz-user-select: none;      /* Old versions of Firefox */
            -ms-user-select: none;       /* Internet Explorer/Edge */
            user-select: none;           /* Non-prefixed version, currently supported by Chrome, Edge, Opera and Firefox */
        }
        button {
            -webkit-tap-highlight-color: transparent;
        }
        /* Correção para remover a borda de foco/toque no botão de perfil */
        #profile-button:focus, #profile-button:active {
            outline: none !important;
            box-shadow: none !important;
            -webkit-tap-highlight-color: transparent !important;
        }
        /* Estilos para a caixa de mensagens (com CSS padrão para robustez) */
        .message {
            display: flex;
            align-items: flex-start;
            gap: 10px; /* Corresponde a gap-2.5 */
        }
        .message-avatar {
            width: 40px; /* Dobro do tamanho anterior */
            height: 40px; /* Dobro do tamanho anterior */
            border-radius: 9999px; /* Corresponde a rounded-full */
            object-fit: cover;
            flex-shrink: 0;
        }
        .message-content {
            padding: 8px 12px; /* Corresponde a px-3 py-2 */
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06); /* Corresponde a shadow-md */
        }
        .message.received .message-content {
            background-color: #E5E7EB; /* Corresponde a bg-gray-200 */
            color: #1F2937; /* Corresponde a text-gray-800 */
            border-radius: 1rem; /* Corresponde a rounded-2xl */
            border-top-left-radius: 0; /* Nova ponta do balão */
        }
        .message.sent .message-content {
            background-color: #6366F1; /* Corresponde a bg-indigo-500 */
            color: white;
            border-radius: 1rem; /* Corresponde a rounded-2xl */
            border-top-left-radius: 0; /* Nova ponta do balão */
        }
        .message-info {
            font-size: 0.75rem; /* Corresponde a text-xs */
            color: #9CA3AF; /* Corresponde a text-gray-400 */
            padding-left: 4px;
            padding-right: 4px;
        }
    </style>
</head>
<body>
    <!-- Novo container principal para centralizar todos os elementos -->
    <div id="main-container" class="flex items-center justify-center min-h-screen p-4">
        <!-- Conteúdo do Login -->
        <div id="app" class="w-full max-w-md">
            <!-- Formulário de Login Padrão -->
            <div id="login-form-container" class="w-full max-w-xs mx-auto">
                <div class="space-y-4">
                    <h2 class="text-2xl font-bold text-center text-gray-800">Login</h2>

                    <!-- Campo do Email -->
                    <div class="w-full">
                        <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                        <input type="email" id="email" autocomplete="email" class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-lg">
                    </div>

                    <!-- Campo da Senha -->
                    <div class="w-full">
                        <label for="password" class="block text-sm font-medium text-gray-700">Senha</label>
                        <input type="password" id="password" autocomplete="current-password" class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-lg">
                    </div>

                    <!-- Botão de Entrar -->
                    <button id="login-button" class="w-full px-4 py-3 bg-indigo-600 hover:bg-indigo-700 text-white font-bold rounded-md shadow-lg hover:shadow-xl focus:outline-none transition-all text-lg">
                        Entrar
                    </button>

                    <!-- Botão de redefinir senha (agora como texto) -->
                    <button id="reset-password-button" class="!mt-2 w-full text-sm text-center text-gray-600 hover:text-indigo-600 hover:underline focus:outline-none transition-colors duration-200">
                        Esqueceu a senha?
                    </button>
                </div>
            </div>

            <!-- Formulário de Nova Senha (inicialmente escondido) -->
            <div id="new-password-container" class="hidden space-y-6 bg-white p-6 rounded-xl shadow-lg">
                <button id="back-button-new-password" class="w-full flex items-center justify-center px-4 py-2 bg-gray-200 text-gray-800 font-semibold rounded-md shadow-sm hover:bg-gray-300 focus:outline-none transition-all">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                    Voltar
                </button>
                <p class="text-center font-semibold text-gray-700 text-lg">Defina sua nova senha</p>
                <div class="relative">
                    <label for="new-password" class="block text-sm font-medium text-gray-700">Nova Senha</label>
                    <input type="password" id="new-password" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                <div class="relative">
                    <label for="confirm-password" class="block text-sm font-medium text-gray-700">Confirme a Senha</label>
                    <input type="password" id="confirm-password" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                <button id="update-password-button" class="w-full px-4 py-2 bg-indigo-600 text-white font-semibold rounded-md shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all">
                    Confirmar
                </button>
            </div>
        </div>
    </div>

    <!-- Nova tela do usuário logado -->
    <div id="logged-in-app" class="hidden h-screen">
        <!-- Container fixo no canto superior esquerdo -->
        <div id="main-header" class="fixed top-0 left-0 right-0 bg-white p-4 shadow-md z-40 h-24 flex items-center">
            <button id="profile-button" class="flex items-center space-x-4 p-2 rounded-full transition-all duration-200 focus:outline-none">
                <img id="user-avatar-logged-in" src="https://placehold.co/100x100/A0A0A0/FFFFFF?text=P" alt="Profile" class="w-12 h-12 rounded-full object-cover">
                <p id="user-email-display" class="text-xl font-bold text-theme noselect"></p>
            </button>
            <!-- Botões de Ação -->
            <div class="absolute right-4 top-1/2 -translate-y-1/2 flex items-center space-x-2">
                <button id="open-liars-dice-btn" class="p-2 rounded-full hover:bg-gray-200 transition-colors">
                    <i class="fas fa-dice text-2xl text-gray-700"></i>
                </button>
            </div>
        </div>

        <!-- Modais de Apps removidos -->

        <!-- A grelha de botões foi removida -->

        <!-- NOVO: Container do Jogo Dado do Mentiroso -->
        <div id="liars-dice-container" class="hidden fixed top-24 inset-x-0 bottom-80 p-4 overflow-y-auto bg-gray-200 z-20">
            <!-- Lobby do Jogo -->
            <div id="dice-game-lobby" class="flex flex-col items-center justify-center h-full">
                <h2 class="text-3xl font-bold text-gray-800 mb-6">Dado do Mentiroso</h2>
                <div class="space-y-4 text-center">
                    <button id="dice-create-game-btn" class="w-full px-6 py-3 bg-indigo-600 hover:bg-indigo-700 text-white font-bold rounded-md shadow-lg text-lg">Criar Novo Jogo</button>
                    <p class="text-gray-600">ou</p>
                    <div class="flex items-center gap-2">
                        <input type="text" id="dice-room-code-input" placeholder="Código da Sala" class="flex-grow px-4 py-3 border border-gray-300 rounded-md shadow-sm text-lg uppercase text-center">
                        <button id="dice-join-game-btn" class="px-6 py-3 bg-green-600 hover:bg-green-700 text-white font-bold rounded-md shadow-lg text-lg">Entrar</button>
                    </div>
                    <p id="dice-lobby-message" class="text-red-500 h-4"></p>
                    <button id="dice-start-game-btn" class="hidden w-full px-6 py-3 bg-purple-600 hover:bg-purple-700 text-white font-bold rounded-md shadow-lg text-lg mt-4">Iniciar Jogo</button>
                </div>
                <button id="dice-exit-game-btn" class="absolute top-4 right-4 text-gray-600 hover:text-gray-900 text-2xl">&times;</button>
            </div>

            <!-- Tela Principal do Jogo -->
            <div id="dice-game-screen" class="hidden h-full flex flex-col">
                <!-- Informações do Jogo (Oponentes e Sala) -->
                <div class="flex justify-between items-center mb-2">
                    <h3 class="text-xl font-bold">Sala: <span id="dice-game-room-code" class="font-mono"></span></h3>
                    <div id="dice-turn-timer" class="text-lg font-bold text-red-600"></div>
                    <div id="dice-game-opponents" class="flex gap-4 text-sm">
                        <!-- Oponentes serão preenchidos aqui -->
                    </div>
                </div>

                <!-- Histórico e Lance Atual -->
                <div class="bg-white rounded-lg p-2 mb-2 flex-shrink-0">
                    <p class="text-center font-semibold">Lance Atual: <span id="dice-current-bid" class="text-lg text-indigo-600">Nenhum</span></p>
                    <div id="dice-round-history" class="text-xs text-gray-500 text-center truncate">Histórico: -</div>
                </div>

                <!-- Mão do Jogador (seus dados) -->
                <div class="flex-grow flex flex-col items-center justify-center bg-gray-800 rounded-lg p-4">
                    <h4 class="text-white font-semibold mb-3">Seus Dados</h4>
                    <div id="dice-player-hand" class="flex gap-4 text-4xl text-white">
                        <!-- Os dados do jogador aparecerão aqui -->
                    </div>
                </div>

                <!-- Ações do Jogador -->
                <div id="dice-game-actions" class="mt-2 grid grid-cols-3 gap-2 flex-shrink-0">
                    <button id="dice-action-bid" class="w-full py-3 bg-blue-500 text-white font-bold rounded-md">Aumentar Lance</button>
                    <button id="dice-action-bluff" class="w-full py-3 bg-red-600 text-white font-bold rounded-md">Mentiroso!</button>
                    <button id="dice-action-exact" class="w-full py-3 bg-yellow-500 text-white font-bold rounded-md">Exato!</button>
                </div>

                <!-- UI para Fazer Lance (Modal/Overlay) -->
                <div id="dice-bidding-ui" class="hidden absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
                    <div class="bg-white p-6 rounded-lg shadow-xl w-full max-w-sm text-center">
                        <h3 class="text-xl font-bold mb-4">Faça seu Lance</h3>
                        <div class="flex items-center justify-center gap-4">
                            <input type="number" id="dice-bid-quantity" min="1" value="1" class="w-24 px-4 py-2 border rounded text-2xl text-center">
                            <span class="text-2xl">&times;</span>
                            <div id="dice-bid-face-selector" class="flex gap-2 text-3xl">
                                <!-- Ícones dos dados para selecionar a face -->
                            </div>
                        </div>
                        <div class="mt-6 flex gap-4">
                            <button id="dice-cancel-bid-btn" class="w-full py-2 bg-gray-300 rounded">Cancelar</button>
                            <button id="dice-confirm-bid-btn" class="w-full py-2 bg-indigo-600 text-white rounded">Confirmar</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Caixa de Mensagens -->
        <div id="message-container" class="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 p-4 h-80 z-30">
            <div id="message-list" class="h-full pb-16 overflow-y-auto space-y-4">
                <!-- As mensagens aparecerão aqui -->
            </div>
            <form id="message-form" class="absolute bottom-4 left-4 right-4 flex items-center gap-2">
                <input id="message-input" type="text" placeholder="Digite sua mensagem..." class="flex-grow w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500" autocomplete="off">
                <button id="send-button" type="submit" class="px-4 py-2 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700 focus:outline-none">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </form>
        </div>
    </div>

    <!-- Modal para opções do perfil -->
    <div id="profile-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-50">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-sm w-full text-center space-y-4">
            <div class="flex justify-end">
                <button id="close-profile-modal" class="text-gray-500 hover:text-gray-700">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            <h3 class="text-2xl font-bold text-theme">Opções do Perfil</h3>
            <button id="edit-profile-button" class="w-full px-4 py-3 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300 transition-colors">
                Editar Perfil
            </button>
            <button id="change-password-button" class="w-full px-4 py-3 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300 transition-colors">
                Trocar Senha
            </button>
            <button id="logout-button" class="w-full px-4 py-3 bg-red-500 text-white font-semibold rounded-md hover:bg-red-600 transition-colors">
                Sair
            </button>
        </div>
    </div>

    <!-- Novo Modal para editar perfil -->
    <div id="edit-profile-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-50">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-sm w-full text-center space-y-4">
            <div class="flex justify-end">
                <button id="close-edit-profile-modal" class="text-gray-500 hover:text-gray-700">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            <h3 class="text-2xl font-bold text-theme">Editar Perfil</h3>

            <!-- Novo campo para o nome do perfil -->
            <div class="relative">
                <label for="profile-name" class="block text-sm font-medium text-left text-theme">Nome do Perfil</label>
                <input type="text" id="profile-name-input" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500" maxlength="21">
            </div>
            <button id="update-profile-button" class="w-full px-4 py-3 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700 transition-colors">
                Salvar Nome do Perfil
            </button>

            <label for="avatar-upload" class="block text-sm font-medium text-left text-theme">Trocar Foto</label>
            <input type="file" id="avatar-upload" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100"/>
            <button id="upload-avatar-button" class="w-full px-4 py-3 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700 transition-colors">
                Fazer Upload da Foto
            </button>
            <p id="upload-message" class="text-sm font-medium p-2 rounded-lg" style="display: none;"></p>
        </div>
    </div>

    <!-- Modal para confirmação de redefinição de senha -->
    <div id="reset-password-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-50">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-sm text-center space-y-4">
            <h3 class="text-xl font-bold text-theme">Verifique seu Email</h3>
            <p class="text-theme">Um link para redefinição de senha foi enviado para <span id="reset-email-display" class="font-semibold text-indigo-600"></span>. Siga as instruções para criar uma nova senha.</p>
            <button id="close-modal-button" class="px-6 py-2 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700">OK</button>
        </div>
    </div>

    <!-- Novo Modal de Mensagem de Espera -->
    <div id="wait-message-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-50">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-sm w-full text-center space-y-4">
            <h3 class="text-xl font-bold text-theme">Aguarde</h3>
            <p class="text-theme">É necessário aguardar para enviar outro e-mail. Por favor, aguarde <span id="wait-time" class="font-semibold text-indigo-600"></span> segundos.</p>
            <button id="close-wait-modal" class="px-6 py-2 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700">OK</button>
        </div>
    </div>

    <!-- Modal para confirmação de exclusão -->
    <div id="delete-confirm-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-[100]">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-sm w-full text-center space-y-4">
            <h3 class="text-xl font-bold text-theme">Confirmar Exclusão</h3>
            <p id="delete-confirm-message" class="text-theme">Tem certeza que deseja excluir este item da lista?</p>
            <div class="flex justify-center space-x-4">
                <button id="cancel-delete-button" class="px-6 py-2 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300">Cancelar</button>
                <button id="confirm-delete-button" class="px-6 py-2 bg-red-500 text-white font-semibold rounded-md hover:bg-red-600">Excluir</button>
            </div>
        </div>
    </div>

    <!-- Modal para confirmação de mover item -->
    <div id="move-item-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-[100]">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-sm w-full text-center space-y-4">
            <h3 class="text-xl font-bold text-theme">Confirmar Ação</h3>
            <p id="move-item-confirm-message" class="text-theme"></p>
            <div class="flex justify-center space-x-4">
                <button id="cancel-move-button" class="px-6 py-2 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300 transition-colors">Cancelar</button>
                <button id="confirm-move-button" class="px-6 py-2 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700">Confirmar</button>
            </div>
        </div>
    </div>

    <!-- Modais de Configurações, Edição e Explorar foram removidos -->

    <!-- Modal de Comparação de Preços -->
    <div id="price-comparison-modal" class="fixed inset-0 bg-gray-100 hidden flex-col z-50">
        <!-- Cabeçalho do Modal -->
        <header class="flex items-center justify-between p-4 bg-white shadow-md">
            <div>
                <h2 class="text-2xl font-bold text-theme">Comparar Preços</h2>
                <p id="comparison-item-name" class="text-lg text-theme"></p>
            </div>
            <button id="close-price-comparison-modal" class="text-gray-500 hover:text-gray-700">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </header>

        <!-- Formulário para Adicionar Preço -->
        <div class="p-4 bg-white border-b">
            <div class="flex flex-col sm:flex-row gap-2">
                <input type="text" id="price-location-input" placeholder="Nome do Local" class="flex-grow px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                <input type="number" id="price-value-input" placeholder="Preço (ex: 12.99)" step="0.01" class="px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                <button id="add-price-button" class="px-4 py-2 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700 transition-colors">Adicionar</button>
            </div>
        </div>

        <!-- Lista de Preços -->
        <div id="price-list-container" class="flex-grow overflow-y-auto p-4 space-y-2">
            <!-- Preços serão injetados aqui -->
        </div>
    </div>

    <!-- Modal para Editar Preço -->
    <div id="edit-price-modal" class="fixed inset-0 bg-gray-100 hidden flex-col z-[60]">
        <header class="flex items-center justify-between p-4 bg-white shadow-md">
            <h2 class="text-2xl font-bold text-theme">Editar Preço</h2>
            <button id="close-edit-price-modal-x-button" class="text-gray-500 hover:text-gray-700">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </header>
        <div class="flex flex-col p-4 bg-gray-100 flex-grow space-y-4">
            <div class="relative">
                <label for="edit-price-location-input" class="block text-sm font-medium text-left text-theme">Local</label>
                <input type="text" id="edit-price-location-input" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
            </div>
            <div class="relative">
                <label for="edit-price-value-input" class="block text-sm font-medium text-left text-theme">Preço</label>
                <input type="number" id="edit-price-value-input" step="0.01" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
            </div>
            <div class="flex justify-between space-x-4 pt-2">
                <button id="save-edit-price-button" class="w-full px-4 py-3 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700">Salvar</button>
                <button id="cancel-edit-price-button" class="w-full px-4 py-3 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300">Cancelar</button>
            </div>
        </div>
    </div>


    <script type="module">
        // --- CORREÇÃO IMPORTANTE PARA O ERRO "INVALID API KEY" ---
        // O erro que está a receber ("Invalid API key") significa que os valores abaixo
        // não correspondem ao seu projeto Supabase. É necessário substituí-los.
        //
        // COMO RESOLVER:
        // 1. Vá ao painel do seu projeto no site do Supabase.
        // 2. Navegue até "Project Settings" (Definições do Projeto) e depois "API".
        // 3. Copie o "Project URL" e cole no lugar de 'SUA_SUPABASE_URL'.
        // 4. Na mesma página, copie a chave "anon" (pública) e cole no lugar de 'SUA_SUPABASE_ANON_KEY'.
        //
        // O código não funcionará até que substitua estas duas linhas com as suas chaves corretas.
        const SUPABASE_URL = 'https://oiojubqxgyheubvahezw.supabase.co'; // Substitua com o seu URL do projeto
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9pb2p1YnF4Z3loZXVidmFoZXp3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjA1MDUyMDgsImV4cCI6MjA3NjA4MTIwOH0.T6ARy74B9ihqVDIdsqxhwbnbFTdoIUj2A5BKqfNCWxA'; // Substitua com a sua chave anon (pública)




        import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/+esm';

        // Configura o cliente do Supabase
        const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

        // --- REFERÊNCIAS DE ELEMENTOS HTML ---
        const mainContainer = document.getElementById('main-container');
        const app = document.getElementById('app');
        const loggedInAppContainer = document.getElementById('logged-in-app');
        const loginFormContainer = document.getElementById('login-form-container');
        const userEmailDisplay = document.getElementById('user-email-display');
        const emailInput = document.getElementById('email');
        const passwordInput = document.getElementById('password');
        const loginButton = document.getElementById('login-button');
        const resetPasswordButton = document.getElementById('reset-password-button');
        const resetPasswordModal = document.getElementById('reset-password-modal');
        const resetEmailDisplay = document.getElementById('reset-email-display');
        const closeModalButton = document.getElementById('close-modal-button');
        const newPasswordContainer = document.getElementById('new-password-container');
        const newPasswordInput = document.getElementById('new-password');
        const confirmPasswordInput = document.getElementById('confirm-password');
        const updatePasswordButton = document.getElementById('update-password-button');
        const backButtonNewPassword = document.getElementById('back-button-new-password');
        const userInitialsLoggedIn = document.getElementById('user-initials-logged-in');

        // Novas referências
        const profileButton = document.getElementById('profile-button');
        const profileModal = document.getElementById('profile-modal');
        const closeProfileModalButton = document.getElementById('close-profile-modal');
        const editProfileButton = document.getElementById('edit-profile-button');
        const changePasswordButton = document.getElementById('change-password-button');
        const logoutButtonModal = document.getElementById('logout-button');
        const editProfileModal = document.getElementById('edit-profile-modal');
        const closeEditProfileModalButton = document.getElementById('close-edit-profile-modal');
        const avatarUploadInput = document.getElementById('avatar-upload');
        const uploadAvatarButton = document.getElementById('upload-avatar-button');
        const uploadMessage = document.getElementById('upload-message');
        const userAvatarLoggedIn = document.getElementById('user-avatar-logged-in');
        const profileNameInput = document.getElementById('profile-name-input');
        const updateProfileButton = document.getElementById('update-profile-button');

        // Referências do novo modal de espera
        const waitMessageModal = document.getElementById('wait-message-modal');
        const waitTimeSpan = document.getElementById('wait-time');
        const closeWaitModalButton = document.getElementById('close-wait-modal');

        // Referências do modal de confirmação de exclusão
        const deleteConfirmModal = document.getElementById('delete-confirm-modal');
        const confirmDeleteButton = document.getElementById('confirm-delete-button');
        const cancelDeleteButton = document.getElementById('cancel-delete-button');

        // Referências do modal de mover item
        const moveItemModal = document.getElementById('move-item-modal');
        const moveItemConfirmMessage = document.getElementById('move-item-confirm-message');
        const confirmMoveButton = document.getElementById('confirm-move-button');
        const cancelMoveButton = document.getElementById('cancel-move-button');

        // Variáveis de Apps e Configurações removidas para simplificação
        const mainHeader = document.getElementById('main-header');

        // Referências da Caixa de Mensagens
        const messageList = document.getElementById('message-list');
        const messageForm = document.getElementById('message-form');
        const messageInput = document.getElementById('message-input');

        // --- NOVO: Referências do Jogo Dado do Mentiroso ---
        const liarsDiceContainer = document.getElementById('liars-dice-container');
        const diceGameLobby = document.getElementById('dice-game-lobby');
        const diceGameScreen = document.getElementById('dice-game-screen');
        const createGameBtn = document.getElementById('dice-create-game-btn');
        const joinGameBtn = document.getElementById('dice-join-game-btn');
        const roomCodeInput = document.getElementById('dice-room-code-input');
        const lobbyMessage = document.getElementById('dice-lobby-message');
        const startGameBtn = document.getElementById('dice-start-game-btn');
        const exitGameBtn = document.getElementById('dice-exit-game-btn');
        const gameRoomCodeDisplay = document.getElementById('dice-game-room-code');
        const turnTimerDisplay = document.getElementById('dice-turn-timer');
        const opponentsContainer = document.getElementById('dice-game-opponents');
        const currentBidDisplay = document.getElementById('dice-current-bid');
        const roundHistoryDisplay = document.getElementById('dice-round-history');
        const openLiarsDiceBtn = document.getElementById('open-liars-dice-btn');
        const playerHandContainer = document.getElementById('dice-player-hand');
        const gameActionsContainer = document.getElementById('dice-game-actions');
        const actionBidBtn = document.getElementById('dice-action-bid');
        const actionBluffBtn = document.getElementById('dice-action-bluff');
        const actionExactBtn = document.getElementById('dice-action-exact');
        const biddingUi = document.getElementById('dice-bidding-ui');
        const bidQuantityInput = document.getElementById('dice-bid-quantity');
        const bidFaceSelector = document.getElementById('dice-bid-face-selector');
        const cancelBidBtn = document.getElementById('dice-cancel-bid-btn');
        const confirmBidBtn = document.getElementById('dice-confirm-bid-btn');


        let itemToDeleteInfo = null;
        let customAppsSubscription = null;
        let isDragging = false;
        let tempPreferences = {}; // State for settings modal
        let isAppInitialized = false;

        // --- NOVO: Lógica do Jogo Dado do Mentiroso ---
        let currentGameRoom = null;
        let currentPlayer = null;
        let gamePlayers = [];
        let gameSubscription = null;
        let turnTimerInterval = null;
        const TURN_DURATION_SECONDS = 30;

        // Mapeamento de número para ícone de dado do Font Awesome
        const diceIcons = {
            1: 'fas fa-dice-one',
            2: 'fas fa-dice-two',
            3: 'fas fa-dice-three',
            4: 'fas fa-dice-four',
            5: 'fas fa-dice-five',
            6: 'fas fa-dice-six',
        };

        // Função para mostrar/esconder o jogo
        function showDiceGame(show) {
            if (show) {
                liarsDiceContainer.classList.remove('hidden');
                // Adicionar um botão para abrir o jogo na barra de cabeçalho, se necessário
            } else {
                liarsDiceContainer.classList.add('hidden');
            }
        }

        // Função para renderizar o estado do jogo na UI
        async function renderGameState(room, players) {
            if (!room || !players) return;

            const { data: { user } } = await supabase.auth.getUser();
            if (!user) return;

            // Atualiza o estado global
            currentGameRoom = room;
            gamePlayers = players;
            currentPlayer = players.find(p => p.player_id === user.id);

            // Limpa a mensagem de "Entrando na sala..."
            lobbyMessage.textContent = '';

            // Alterna entre lobby e tela do jogo
            if (room.game_state === 'lobby') {
                diceGameLobby.classList.remove('hidden');
                diceGameScreen.classList.add('hidden');

                // Mostra o botão Iniciar Jogo para o anfitrião se houver jogadores suficientes
                if (user.id === room.host_id) {
                    if (players.length >= 2) {
                        startGameBtn.classList.remove('hidden');
                        lobbyMessage.textContent = 'Jogadores suficientes! Pode iniciar o jogo.';
                    } else {
                        startGameBtn.classList.add('hidden');
                        lobbyMessage.textContent = 'Aguardando mais jogadores para começar...';
                    }
                } else {
                    lobbyMessage.textContent = 'Aguardando o anfitrião iniciar o jogo.';
                }
            } else {
                diceGameLobby.classList.add('hidden');
                diceGameScreen.classList.remove('hidden');
            }

            showDiceGame(true);

            // Renderiza informações gerais
            gameRoomCodeDisplay.textContent = room.room_code;

            // Renderiza oponentes
            opponentsContainer.innerHTML = '';
            players.filter(p => p.player_id !== user.id).forEach(p => {
                const opponentEl = document.createElement('div');
                opponentEl.textContent = `Oponente (${p.dice_count} dados)`;
                opponentsContainer.appendChild(opponentEl);
            });

            // Renderiza a mão do jogador atual
            playerHandContainer.innerHTML = '';
            if (currentPlayer && currentPlayer.dice_roll) {
                currentPlayer.dice_roll.forEach(die => {
                    const dieEl = document.createElement('i');
                    dieEl.className = `${diceIcons[die]}`;
                    playerHandContainer.appendChild(dieEl);
                });
            }

            // Atualiza o lance atual
            if (room.last_bid_quantity && room.last_bid_face) {
                currentBidDisplay.innerHTML = `${room.last_bid_quantity} &times; <i class="${diceIcons[room.last_bid_face]} text-indigo-600"></i>`;
            } else {
                currentBidDisplay.textContent = 'Nenhum';
            }

            // Controla a visibilidade dos botões de ação
            if (room.current_turn_player_id === user.id) {
                gameActionsContainer.classList.remove('opacity-50', 'pointer-events-none');
            } else {
                gameActionsContainer.classList.add('opacity-50', 'pointer-events-none');
            }

            // Desabilita os botões de desafio se não houver um lance
            if (!room.last_bid_quantity) {
                actionBluffBtn.disabled = true;
                actionExactBtn.disabled = true;
            } else {
                actionBluffBtn.disabled = false;
                actionExactBtn.disabled = false;
            }

            // Lógica de Revelação (apenas visual)
            if (room.game_state.startsWith('reveal')) {
                gameActionsContainer.classList.add('hidden'); // Oculta ações durante a revelação
                if (turnTimerInterval) clearInterval(turnTimerInterval);
                turnTimerDisplay.textContent = '';
                opponentsContainer.innerHTML = '<h4>Dados na mesa:</h4>';
                // Mostra os dados de todos
                players.forEach(p => {
                    const playerDiceEl = document.createElement('div');
                    playerDiceEl.innerHTML = `<p>${p.player_id === user.id ? 'Você' : 'Oponente'} (${p.dice_count} dados): ${p.dice_roll.map(d => `<i class="${diceIcons[d]}"></i>`).join(' ')}</p>`;
                    opponentsContainer.appendChild(playerDiceEl);
                });
            } else {
                gameActionsContainer.classList.remove('hidden');

                // Lógica do Temporizador
                if (turnTimerInterval) clearInterval(turnTimerInterval);
                if (room.turn_expires_at) {
                    turnTimerInterval = setInterval(() => {
                        const timeLeft = Math.round((new Date(room.turn_expires_at) - new Date()) / 1000);
                        if (timeLeft <= 0) {
                            turnTimerDisplay.textContent = '0s';
                            clearInterval(turnTimerInterval);
                            // O anfitrião verifica e penaliza o jogador
                            if (user.id === room.host_id) {
                                // Implementar a penalidade (considerado como um desafio "Mentiroso!" perdido pelo jogador do turno)
                            }
                        } else {
                            turnTimerDisplay.textContent = `${timeLeft}s`;
                        }
                    }, 1000);
                }
            }
        }

        // Função para criar um novo jogo
        async function handleCreateGame() {
            const { data: { user } } = await supabase.auth.getUser();
            if (!user) {
                lobbyMessage.textContent = 'Você precisa estar logado para criar um jogo.';
                return;
            }

            lobbyMessage.textContent = 'Criando sala...';
            const roomCode = Math.random().toString(36).substring(2, 7).toUpperCase();

            // 1. Chama a função RPC para criar a sala e adicionar o jogador
            const { data, error: rpcError } = await supabase.rpc('create_new_game_room', {
                p_room_code: roomCode
            });

            if (rpcError) {
                lobbyMessage.textContent = `Erro ao criar sala: ${rpcError.message}`;
                return;
            }

            // 2. A sala foi criada, agora busca o estado completo para renderizar
            await handleJoinGame(roomCode);
        }

        // Função para entrar em um jogo
        async function handleJoinGame(code) {
            const roomCode = (code || roomCodeInput.value).toUpperCase();
            if (!roomCode) {
                lobbyMessage.textContent = 'Por favor, insira um código de sala.';
                return;
            }

            const { data: { user } } = await supabase.auth.getUser();
            if (!user) return;

            lobbyMessage.textContent = 'Entrando na sala...';

            // 1. Encontra a sala
            const { data: room, error: findRoomError } = await supabase.from('game_rooms')
                .select('*').eq('room_code', roomCode).single();

            if (findRoomError || !room) {
                lobbyMessage.textContent = 'Sala não encontrada ou código inválido.';
                return;
            }
            if (room.game_state !== 'lobby') {
                lobbyMessage.textContent = 'O jogo já começou.';
                return;
            }

            // 2. Verifica se o jogador já está na sala antes de o inserir
            const { data: existingPlayer, error: checkError } = await supabase
                .from('game_players')
                .select('id')
                .match({ room_id: room.id, player_id: user.id })
                .maybeSingle();

            if (checkError) {
                lobbyMessage.textContent = `Erro ao verificar jogador: ${checkError.message}`;
                return;
            }

            if (!existingPlayer) {
                // Só insere o jogador se ele não estiver na sala
                const { error: joinError } = await supabase.from('game_players').insert({
                    room_id: room.id,
                    player_id: user.id
                });

                if (joinError) {
                    lobbyMessage.textContent = `Erro ao entrar na sala: ${joinError.message}`;
                    return;
                }
            }

            // 3. Busca o estado completo e renderiza
            const { data: players, error: playersError } = await supabase.from('game_players')
                .select('*').eq('room_id', room.id);

            if (playersError) {
                lobbyMessage.textContent = `Erro ao buscar jogadores: ${playersError.message}`;
                return;
            }

            renderGameState(room, players);

            // 4. Se inscreve para atualizações em tempo real
            subscribeToGame(room.id);
        }

        // Função para sair do jogo
        async function handleExitGame() {
            const { data: { user } } = await supabase.auth.getUser();
            if (!user || !currentGameRoom) return;

            // Remove o jogador da sala
            await supabase.from('game_players').delete()
                .match({ room_id: currentGameRoom.id, player_id: user.id });

            // Cancela a inscrição
            if (gameSubscription) {
                supabase.removeChannel(gameSubscription);
                gameSubscription = null;
            }

            // Reseta o estado e a UI
            currentGameRoom = null;
            currentPlayer = null;
            gamePlayers = [];
            showDiceGame(false);
        }

        // Função para se inscrever às atualizações do jogo
        function subscribeToGame(roomId) {
            if (gameSubscription) {
                supabase.removeChannel(gameSubscription);
            }
            gameSubscription = supabase.channel(`game_room:${roomId}`)
                .on('postgres_changes', { event: '*', schema: 'public', table: 'game_rooms', filter: `id=eq.${roomId}` }, async (payload) => {
                    const updatedRoom = payload.new;
                    const { data: updatedPlayers } = await supabase.from('game_players').select('*').eq('room_id', roomId);
                    renderGameState(updatedRoom, updatedPlayers);

                    // Lógica de Resolução do Desafio (executada pelo anfitrião)
                    const { data: { user } } = await supabase.auth.getUser();
                    if (updatedRoom.game_state.startsWith('reveal') && updatedRoom.host_id === user.id) {
                        resolveChallenge(updatedRoom, updatedPlayers);
                    }
                })
                .on('postgres_changes', { event: '*', schema: 'public', table: 'game_players', filter: `room_id=eq.${roomId}` }, async (payload) => {
                    const { data: updatedPlayers } = await supabase.from('game_players').select('*').eq('room_id', roomId);
                    renderGameState(currentGameRoom, updatedPlayers);
                })
                .subscribe();
        }

        async function resolveChallenge(room, players) {
            const bidQuantity = room.last_bid_quantity;
            const bidFace = room.last_bid_face;

            // 1. Conta a quantidade real de dados na mesa
            let actualCount = 0;
            players.forEach(p => {
                p.dice_roll.forEach(die => {
                    if (die === bidFace || die === 1) { // '1' é curinga
                        actualCount++;
                    }
                });
            });

            const challenger = players.find(p => p.player_id === room.challenger_id);
            const bidder = players.find(p => p.player_id === room.last_bidder_id);
            let loser;

            // 2. Determina o resultado
            if (room.game_state === 'reveal_bluff') {
                if (actualCount >= bidQuantity) { // O lance era verdadeiro
                    loser = challenger;
                } else { // O lance era um blefe
                    loser = bidder;
                }
            } else if (room.game_state === 'reveal_exact') {
                if (actualCount === bidQuantity) { // Acerto exato!
                    // O desafiante ganha um dado (se não tiver 5)
                    if (challenger.dice_count < 5) {
                        await supabase.from('game_players').update({ dice_count: challenger.dice_count + 1 }).eq('id', challenger.id);
                    }
                    loser = null; // Ninguém perde
                } else {
                    loser = challenger; // O desafiante errou
                }
            }

            // 3. Penaliza o perdedor
            if (loser) {
                const newDiceCount = loser.dice_count - 1;
                if (newDiceCount === 0) {
                    // Elimina o jogador
                    await supabase.from('game_players').delete().eq('id', loser.id);
                } else {
                    await supabase.from('game_players').update({ dice_count: newDiceCount }).eq('id', loser.id);
                }
            }

            // 4. Pausa para mostrar os resultados e, em seguida, inicia a nova rodada
            setTimeout(async () => {
                const { data: remainingPlayers } = await supabase.from('game_players').select('*').eq('room_id', room.id);
                if (remainingPlayers.length < 2) {
                    // Fim de jogo
                    await supabase.from('game_rooms').update({ game_state: 'finished' }).eq('id', room.id);
                } else {
                    // Prepara a próxima rodada (semelhante a handleStartGame, mas para jogadores restantes)
                    const shuffled = remainingPlayers.sort(() => Math.random() - 0.5);
                    const updates = shuffled.map((p, i) => ({
                        ...p,
                        dice_roll: Array.from({ length: p.dice_count }, () => Math.floor(Math.random() * 6) + 1),
                        turn_order: i + 1
                    }));
                    await supabase.from('game_players').upsert(updates);

                    const nextPlayer = updates.find(p => p.turn_order === 1);
                    const turnExpires = new Date(new Date().getTime() + TURN_DURATION_SECONDS * 1000).toISOString();
                    await supabase.from('game_rooms').update({
                        game_state: 'in_progress',
                        current_turn_player_id: nextPlayer.player_id,
                        last_bid_quantity: null,
                        last_bid_face: null,
                        last_bidder_id: null,
                        challenger_id: null,
                        turn_expires_at: turnExpires
                    }).eq('id', room.id);
                }
            }, 5000); // Pausa de 5 segundos
        }

        // Função para iniciar o jogo (apenas o anfitrião pode fazer isso)
        async function handleStartGame() {
            if (!currentGameRoom || !currentPlayer || currentPlayer.player_id !== currentGameRoom.host_id) return;
            if (gamePlayers.length < 2) {
                lobbyMessage.textContent = "São necessários pelo menos 2 jogadores para começar.";
                return;
            }

            // 1. Embaralha os jogadores para definir a ordem dos turnos
            const shuffledPlayers = [...gamePlayers].sort(() => Math.random() - 0.5);

            // 2. Prepara as atualizações para cada jogador (rolagem de dados e ordem de turno)
            const playerUpdates = shuffledPlayers.map((player, index) => {
                const diceRoll = Array.from({ length: player.dice_count }, () => Math.floor(Math.random() * 6) + 1);
                return {
                    ...player,
                    dice_roll: diceRoll,
                    turn_order: index + 1
                };
            });

            // 3. Atualiza todos os jogadores no banco de dados
            const { error: updatePlayersError } = await supabase.from('game_players').upsert(playerUpdates);
            if (updatePlayersError) {
                lobbyMessage.textContent = `Erro ao iniciar o jogo: ${updatePlayersError.message}`;
                return;
            }

            // 4. Atualiza o estado da sala para 'in_progress' e define o primeiro jogador
            const firstPlayer = playerUpdates.find(p => p.turn_order === 1);
            const turnExpires = new Date(new Date().getTime() + TURN_DURATION_SECONDS * 1000).toISOString();
            const { error: updateRoomError } = await supabase.from('game_rooms').update({
                game_state: 'in_progress',
                current_turn_player_id: firstPlayer.player_id,
                turn_expires_at: turnExpires
            }).eq('id', currentGameRoom.id);

             if (updateRoomError) {
                lobbyMessage.textContent = `Erro ao atualizar a sala: ${updateRoomError.message}`;
            }
        }

        let selectedBidFace = 1;

        // Função para abrir a UI de lances
        function handleBidAction() {
            biddingUi.classList.remove('hidden');
            bidQuantityInput.value = currentGameRoom.last_bid_quantity || 1;

            // Renderiza o seletor de face
            bidFaceSelector.innerHTML = '';
            for (let i = 1; i <= 6; i++) {
                const faceEl = document.createElement('i');
                faceEl.className = `${diceIcons[i]} cursor-pointer p-2 rounded-md hover:bg-gray-200`;
                faceEl.dataset.face = i;
                if (i === selectedBidFace) {
                    faceEl.classList.add('bg-indigo-200');
                }
                faceEl.addEventListener('click', () => {
                    selectedBidFace = i;
                    // Atualiza a UI para refletir a seleção
                    document.querySelectorAll('#dice-bid-face-selector i').forEach(el => el.classList.remove('bg-indigo-200'));
                    faceEl.classList.add('bg-indigo-200');
                });
                bidFaceSelector.appendChild(faceEl);
            }
        }

        // Função para confirmar um lance
        async function handleConfirmBid() {
            const newQuantity = parseInt(bidQuantityInput.value);
            const newFace = selectedBidFace;

            const { last_bid_quantity: oldQuantity, last_bid_face: oldFace } = currentGameRoom;

            // Validação completa do lance, incluindo regras do curinga '1'
            let isValid = false;
            if (!oldQuantity) {
                isValid = true; // Primeiro lance da rodada é sempre válido
            } else if (oldFace === 1 && newFace !== 1) { // Saída do Curinga
                const requiredQuantity = (oldQuantity * 2) + 1;
                isValid = newQuantity >= requiredQuantity;
            } else if (oldFace !== 1 && newFace === 1) { // Entrada no Curinga
                const requiredQuantity = Math.ceil(oldQuantity / 2);
                isValid = newQuantity >= requiredQuantity;
            } else if (newFace === oldFace) { // Aumentando a quantidade da mesma face
                isValid = newQuantity > oldQuantity;
            } else { // Regra padrão (não-curinga para não-curinga, ou curinga para curinga)
                 if (newQuantity > oldQuantity) {
                    isValid = true;
                } else if (newQuantity === oldQuantity && newFace > oldFace) {
                    isValid = true;
                }
            }

            if (!isValid) {
                alert("Lance inválido! Verifique as regras de aumento de lance.");
                return;
            }

            // Encontra o próximo jogador
            const currentPlayerTurnOrder = currentPlayer.turn_order;
            const nextPlayer = gamePlayers.sort((a, b) => a.turn_order - b.turn_order).find(p => p.turn_order > currentPlayerTurnOrder) || gamePlayers.sort((a, b) => a.turn_order - b.turn_order)[0];
            const turnExpires = new Date(new Date().getTime() + TURN_DURATION_SECONDS * 1000).toISOString();

            // Atualiza a sala com o novo lance e o próximo jogador
            await supabase.from('game_rooms').update({
                last_bid_quantity: newQuantity,
                last_bid_face: newFace,
                last_bidder_id: currentPlayer.player_id,
                current_turn_player_id: nextPlayer.player_id,
                turn_expires_at: turnExpires,
                round_history: [...(currentGameRoom.round_history || []), `${currentPlayer.player_id} apostou ${newQuantity}x${newFace}`]
            }).eq('id', currentGameRoom.id);

            biddingUi.classList.add('hidden');
        }

        // Adiciona um gatilho para mostrar o lobby do jogo (ex: um botão na UI principal)
        // Por agora, vamos apenas adicionar os manipuladores de eventos do lobby
        createGameBtn.addEventListener('click', handleCreateGame);
        joinGameBtn.addEventListener('click', () => handleJoinGame());
        startGameBtn.addEventListener('click', handleStartGame);
        exitGameBtn.addEventListener('click', handleExitGame);
        actionBidBtn.addEventListener('click', handleBidAction);
        cancelBidBtn.addEventListener('click', () => biddingUi.classList.add('hidden'));
        confirmBidBtn.addEventListener('click', handleConfirmBid);
        actionBluffBtn.addEventListener('click', () => handleChallenge('bluff'));
        actionExactBtn.addEventListener('click', () => handleChallenge('exact'));

        // Funções para lidar com os desafios "Mentiroso!" e "Exato!"
        async function handleChallenge(type) {
            if (!currentGameRoom || !currentPlayer) return;

            // O anfitrião será responsável por resolver o desafio
            const updates = {
                game_state: `reveal_${type}`, // 'reveal_bluff' ou 'reveal_exact'
                // Armazena quem desafiou para referência
                challenger_id: currentPlayer.player_id
            };

            await supabase.from('game_rooms').update(updates).eq('id', currentGameRoom.id);
        }

        openLiarsDiceBtn.addEventListener('click', () => showDiceGame(true));

        // --- LÓGICA DE MENSAGENS ---
        let usersCache = {};

        async function fetchUsers() {
            const { data, error } = await supabase.from('profiles').select('id, full_name, avatar_url');
            if (error) {
                console.error('Error fetching users:', error);
                return;
            }
            usersCache = data.reduce((acc, user) => {
                acc[user.id] = user;
                return acc;
            }, {});
        }

        async function displayMessage(message) {
            if (!usersCache[message.user_id]) {
                await fetchUsers();
            }
            const userInfo = usersCache[message.user_id] || { full_name: 'Utilizador Desconhecido', avatar_url: `https://placehold.co/100x100/A0A0A0/FFFFFF?text=?` };

            const { data: { session } } = await supabase.auth.getSession();
            const currentUser = session?.user;

            const messageDiv = document.createElement('div');
            const messageType = (currentUser && currentUser.id === message.user_id) ? 'sent' : 'received';
            messageDiv.className = `message ${messageType}`;

            const avatarSrc = userInfo.avatar_url || `https://placehold.co/100x100/A0A0A0/FFFFFF?text=${(userInfo.full_name || 'U').charAt(0).toUpperCase()}`;
            const senderNameHTML = `<p class="font-semibold text-sm text-gray-800">${userInfo.full_name || 'Anónimo'}</p>`;

            messageDiv.innerHTML = `
                <img src="${avatarSrc}" alt="${userInfo.full_name}" class="message-avatar">
                <div class="flex flex-col items-start w-full">
                    ${senderNameHTML}
                    <div class="message-content max-w-xs md:max-w-md mt-1">
                        <p>${message.content}</p>
                    </div>
                    <p class="message-info mt-1">${new Date(message.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</p>
                </div>
            `;
            messageList.appendChild(messageDiv);
            // Auto-scroll para a última mensagem
            messageList.scrollTop = messageList.scrollHeight;
        }

        async function fetchMessages() {
            messageList.innerHTML = '';
            const { data, error } = await supabase
                .from('messages')
                .select('*')
                .order('created_at', { ascending: true });

            if (error) {
                console.error('Erro ao buscar mensagens:', error);
                return;
            }

            for (const message of data) {
                await displayMessage(message);
            }
        }

        messageForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const content = messageInput.value.trim();
            const { data: { user } } = await supabase.auth.getUser();

            if (content && user) {
                const { error } = await supabase.from('messages').insert([{ content, user_id: user.id }]);
                if (error) {
                    console.error('Erro ao enviar mensagem:', error);
                } else {
                    messageInput.value = '';
                }
            }
        });

        // Função para subscrever a novas mensagens em tempo real
        function subscribeToMessages() {
            supabase.channel('public:messages')
                .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'messages' }, payload => {
                    displayMessage(payload.new);
                })
                .subscribe();
        }

        const availableIcons = [
            // Web & Interface
            'fas fa-link', 'fas fa-globe', 'fas fa-star', 'fas fa-heart', 'fas fa-home', 'fas fa-user', 'fas fa-cog',
            'fas fa-envelope', 'fas fa-search', 'fas fa-filter', 'fas fa-bell', 'fas fa-bookmark', 'fas fa-tag',
            'fas fa-print', 'fas fa-download', 'fas fa-upload', 'fas fa-share-alt', 'fas fa-check', 'fas fa-times',
            'fas fa-plus', 'fas fa-minus', 'fas fa-edit', 'fas fa-trash', 'fas fa-info-circle', 'fas fa-question-circle',
            'fas fa-exclamation-triangle', 'fas fa-exclamation-circle', 'fas fa-power-off', 'fas fa-sync-alt',

            // Objects & Items
            'fas fa-book', 'fas fa-gamepad', 'fas fa-music', 'fas fa-video', 'fas fa-camera', 'fas fa-cloud',
            'fas fa-code', 'fas fa-folder', 'fas fa-folder-open', 'fas fa-calculator', 'fas fa-briefcase', 'fas fa-store',
            'fas fa-gift', 'fas fa-key', 'fas fa-lock', 'fas fa-unlock', 'fas fa-wallet', 'fas fa-credit-card',
            'fas fa-shopping-bag', 'fas fa-shopping-cart', 'fas fa-box', 'fas fa-archive', 'fas fa-lightbulb',
            'fas fa-paint-brush', 'fas fa-wrench', 'fas fa-hammer', 'fas fa-tshirt',

            // Business & Finance
            'fas fa-chart-bar', 'fas fa-chart-line', 'fas fa-chart-pie', 'fas fa-dollar-sign', 'fas fa-euro-sign',
            'fas fa-pound-sign', 'fas fa-yen-sign', 'fas fa-piggy-bank', 'fas fa-building', 'fas fa-landmark',
            'fas fa-file-invoice-dollar', 'fas fa-handshake',

            // Communication
            'fas fa-phone', 'fas fa-phone-alt', 'fas fa-comments', 'fas fa-comment', 'fas fa-microphone',
            'fas fa-mobile-alt', 'fas fa-rss', 'fas fa-wifi',

            // Transportation & Travel
            'fas fa-car', 'fas fa-bus', 'fas fa-train', 'fas fa-plane', 'fas fa-ship', 'fas fa-bicycle',
            'fas fa-map-marker-alt', 'fas fa-compass', 'fas fa-suitcase', 'fas fa-route', 'fas fa-gas-pump',

            // Food & Drink
            'fas fa-coffee', 'fas fa-utensils', 'fas fa-pizza-slice', 'fas fa-hamburger', 'fas fa-glass-martini-alt',
            'fas fa-birthday-cake', 'fas fa-cookie-bite',

            // Health & Medical
            'fas fa-heartbeat', 'fas fa-medkit', 'fas fa-stethoscope', 'fas fa-user-md', 'fas fa-pills',
            'fas fa-first-aid', 'fas fa-dna',

            // Miscellaneous
            'fas fa-sun', 'fas fa-moon', 'fas fa-snowflake', 'fas fa-fire', 'fas fa-leaf', 'fas fa-tree',
            'fas fa-graduation-cap', 'fas fa-trophy', 'fas fa-futbol', 'fas fa-palette'
        ];

        const fixedAppsMasterList = [];

        // --- FUNÇÕES DE INICIALIZAÇÃO E UI ---

        // Função para carregar os dados do perfil logado
        async function loadUserProfile(user) {
            const { data: profileData, error } = await supabase
                .from('profiles')
                .select('avatar_url, full_name')
                .eq('id', user.id)
                .single();

            if (!error && profileData) {
                userAvatarLoggedIn.src = profileData.avatar_url || `https://placehold.co/100x100/A0A0A0/FFFFFF?text=${(profileData.full_name || user.email).charAt(0).toUpperCase()}`;
                userEmailDisplay.textContent = profileData.full_name || user.email;
                profileNameInput.value = profileData.full_name || '';
            } else {
                const initial = user.email.charAt(0).toUpperCase();
                userAvatarLoggedIn.src = `https://placehold.co/100x100/A0A0A0/FFFFFF?text=${initial}`;
                userEmailDisplay.textContent = user.email;
                profileNameInput.value = '';
            }
        }

        // Função para alternar a visibilidade das áreas
        function toggleUI(isLoggedIn, view) {
            // Esconde todos os modais primeiro
            profileModal.classList.add('hidden');
            waitMessageModal.classList.add('hidden');
            editProfileModal.classList.add('hidden');
            deleteConfirmModal.classList.add('hidden');


            if (isLoggedIn) {
                // Mostra a App e esconde o contentor do Login
                loggedInAppContainer.classList.remove('hidden');
                mainContainer.classList.add('hidden');

                // Ajusta o estilo do body para a app
                document.body.classList.remove('bg-gray-100');

                hideAppActionBar();

            } else {
                // Mostra o contentor do Login e esconde a App
                mainContainer.classList.remove('hidden');
                loggedInAppContainer.classList.add('hidden');

                // Restaura o estilo do body para o login
                document.body.classList.add('bg-gray-100');
                mainContainer.classList.add('items-center');
                mainContainer.classList.remove('items-start', 'pt-20');


                // Esconde todas as vistas dentro do ecrã de login
                loginFormContainer.classList.add('hidden');
                newPasswordContainer.classList.add('hidden');

                // Mostra a vista de login correta
                if (view === 'new-password') {
                    newPasswordContainer.classList.remove('hidden');
                } else { // A vista padrão é o formulário de login
                    loginFormContainer.classList.remove('hidden');
                }
            }
        }

        // Função para exibir o modal de espera com a contagem regressiva
        function showWaitModal(seconds) {
            let timeLeft = seconds;
            waitTimeSpan.textContent = timeLeft;
            waitMessageModal.classList.remove('hidden');
            waitMessageModal.classList.add('flex');

            const timer = setInterval(() => {
                timeLeft--;
                waitTimeSpan.textContent = timeLeft;
                if (timeLeft <= 0) {
                    clearInterval(timer);
                    waitMessageModal.classList.add('hidden');
                    waitMessageModal.classList.remove('flex');
                }
            }, 1000);
        }

        // Funções de personalização de aparência e de gestão de Apps foram removidas.

        function showEditNoteModal(id, title, content, startDate, endDate, isFixed) {
            editingNoteId = id;
            if (id) {
                noteModalTitle.textContent = 'Editar Nota';
                editNoteTitleInput.value = title;
                editNoteInput.value = content;
                editNoteStartDateInput.value = startDate ? startDate.split('T')[0] : '';
                editNoteEndDateInput.value = endDate ? endDate.split('T')[0] : '';
                editNoteIsFixedCheckbox.checked = isFixed;
            } else {
                noteModalTitle.textContent = 'Adicionar Nova Nota';
                editNoteTitleInput.value = '';
                editNoteInput.value = '';
                editNoteStartDateInput.value = '';
                editNoteEndDateInput.value = '';
                editNoteIsFixedCheckbox.checked = false;
            }
            const fixed = editNoteIsFixedCheckbox.checked;
            editNoteStartDateInput.disabled = fixed;
            editNoteEndDateInput.disabled = fixed;
            editNoteModal.classList.remove('hidden');
            editNoteModal.classList.add('flex');
            editNoteTitleInput.focus();
            noteErrorMessage.classList.add('hidden');
        }

        function closeEditNoteModal() {
            editingNoteId = null;
            editNoteModal.classList.add('hidden');
            editNoteModal.classList.remove('flex');
            noteErrorMessage.classList.add('hidden');
        }



        // --- EVENT LISTENERS ---
        loginButton.addEventListener('click', async () => {
            const email = emailInput.value;
            const password = passwordInput.value;

            if (!email || !password) {
                alert("Por favor, insira o email e a senha.");
                return;
            }

            const { error } = await supabase.auth.signInWithPassword({ email, password });

            if (error) {
                console.error(error);
                alert(`Erro no login: ${error.message}`);
            }
        });

        // Adiciona a funcionalidade de login com a tecla Enter nos campos de email e senha
        emailInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                loginButton.click();
            }
        });

        passwordInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                loginButton.click();
            }
        });

        resetPasswordButton.addEventListener('click', async () => {
            const email = emailInput.value;
            if (!email) {
                alert("Por favor, insira seu email no campo correspondente para redefinir a senha.");
                return;
            }
            const redirectToUrl = `${window.location.origin}${window.location.pathname}`;

            const { error } = await supabase.auth.resetPasswordForEmail(email, {
                redirectTo: redirectToUrl
            });

            if (error) {
                console.error(error);
                if (error.status === 429) {
                    const waitTimeMatch = error.message.match(/after (\d+) seconds/);
                    const waitTime = waitTimeMatch ? parseInt(waitTimeMatch[1]) : 60;
                    showWaitModal(waitTime);
                } else {
                    alert(`Erro ao redefinir senha: ${error.message}`);
                }
            } else {
                resetEmailDisplay.textContent = email;
                resetPasswordModal.classList.remove('hidden');
                resetPasswordModal.classList.add('flex');
            }
        });

        backButtonNewPassword.addEventListener('click', () => {
            toggleUI(false, 'login');
            newPasswordInput.value = '';
            confirmPasswordInput.value = '';
        });


        updatePasswordButton.addEventListener('click', async () => {
            const newPassword = newPasswordInput.value;
            const confirmPassword = confirmPasswordInput.value;

            if (newPassword !== confirmPassword) {
                return;
            }
            if (newPassword.length < 6) {
                return;
            }

            const { error } = await supabase.auth.updateUser({ password: newPassword });

            if (error) {
                console.error(error);
            } else {
                newPasswordInput.value = '';
                confirmPasswordInput.value = '';
                setTimeout(() => {
                    window.location.href = window.location.origin + window.location.pathname;
                }, 1000);
            }
        });

        closeModalButton.addEventListener('click', () => {
            resetPasswordModal.classList.add('hidden');
            resetPasswordModal.classList.remove('flex');
        });

        closeWaitModalButton.addEventListener('click', () => {
            waitMessageModal.classList.add('hidden');
            waitMessageModal.classList.remove('flex');
        });

        // --- NOVOS EVENTOS PARA O MODAL DO PERFIL ---

        profileButton.addEventListener('click', async () => {
            const { data: { session } } = await supabase.auth.getSession();
            if (session) {
                profileModal.classList.remove('hidden');
                profileModal.classList.add('flex');
            }
        });

        closeProfileModalButton.addEventListener('click', () => {
            profileModal.classList.add('hidden');
            profileModal.classList.remove('flex');
        });

        editProfileButton.addEventListener('click', async () => {
            profileModal.classList.add('hidden');
            profileModal.classList.remove('flex');
            editProfileModal.classList.remove('hidden');
            editProfileModal.classList.add('flex');
            const { data, error } = await supabase.from('profiles').select('full_name').eq('id', (await supabase.auth.getSession()).data.session.user.id).single();
            if (!error && data?.full_name) {
                profileNameInput.value = data.full_name;
            }
        });

        closeEditProfileModalButton.addEventListener('click', () => {
            editProfileModal.classList.add('hidden');
            editProfileModal.classList.remove('flex');
            profileModal.classList.remove('hidden');
            profileModal.classList.add('flex');
            uploadMessage.style.display = 'none';
        });

        changePasswordButton.addEventListener('click', async () => {
            profileModal.classList.add('hidden');
            profileModal.classList.remove('flex');
            const { data: { session } } = await supabase.auth.getSession();
            const user = session?.user;

            if (user && user.email) {
                const redirectToUrl = `${window.location.origin}${window.location.pathname}`;

                try {
                    const { error } = await supabase.auth.resetPasswordForEmail(user.email, { redirectTo: redirectToUrl });

                    if (error) {
                         if (error.status === 429) {
                            const waitTimeMatch = error.message.match(/after (\d+) seconds/);
                            const waitTime = waitTimeMatch ? parseInt(waitTimeMatch[1]) : 60;
                            showWaitModal(waitTime);
                         }
                         console.error(error);
                    } else {
                        resetEmailDisplay.textContent = user.email;
                        resetPasswordModal.classList.remove('hidden');
                        resetPasswordModal.classList.add('flex');
                    }
                } catch (err) {
                     console.error(err);
                }
            }
        });

        logoutButtonModal.addEventListener('click', async () => {
            const { error } = await supabase.auth.signOut();
            if (error) {
                console.error('Erro ao sair:', error);
            } else {
                toggleUI(false, 'initial');
                passwordInput.value = '';
            }
        });

        uploadAvatarButton.addEventListener('click', async () => {
            const { data: { session } = {} } = await supabase.auth.getSession();
            const user = session?.user;

            if (!user) {
                uploadMessage.textContent = 'Erro: Nenhum usuário logado.';
                uploadMessage.style.display = 'block';
                return;
            }

            const file = avatarUploadInput.files[0];
            if (!file) {
                uploadMessage.textContent = 'Por favor, selecione um arquivo.';
                uploadMessage.style.display = 'block';
                return;
            }

            uploadMessage.textContent = 'Carregando...';
            uploadMessage.style.display = 'block';
            uploadMessage.classList.remove('text-red-700', 'text-green-700');
            uploadMessage.classList.add('text-gray-700');

            const filePath = `${user.id}/${file.name}`;
            const { error: uploadError } = await supabase.storage
                .from('avatars')
                .upload(filePath, file, {
                    cacheControl: '3600',
                    upsert: true
                });

            if (uploadError) {
                console.error(uploadError);
                uploadMessage.textContent = `Erro ao fazer upload: ${uploadError.message}`;
                uploadMessage.classList.add('text-red-700');
            } else {
                const { data: { publicUrl }, error: urlError } = supabase.storage
                    .from('avatars')
                    .getPublicUrl(filePath);

                if (urlError) {
                    console.error(urlError);
                    uploadMessage.textContent = 'Erro ao obter o URL da imagem.';
                    uploadMessage.classList.add('text-red-700');
                    return;
                }

                const { error: updateError } = await supabase
                    .from('profiles')
                    .upsert({ id: user.id, avatar_url: publicUrl })
                    .eq('id', user.id);

                if (updateError) {
                    console.error(updateError);
                    uploadMessage.textContent = `Erro ao atualizar perfil: ${updateError.message}`;
                    uploadMessage.classList.add('text-red-700');
                } else {
                    userAvatarLoggedIn.src = publicUrl;
                    uploadMessage.textContent = 'Upload bem-sucedido!';
                    uploadMessage.classList.add('text-green-700');
                    avatarUploadInput.value = null;
                    fetchUsers();
                }
            }
        });

        updateProfileButton.addEventListener('click', async () => {
            const { data: { session } = {} } = await supabase.auth.getSession();
            const user = session?.user;
            if (!user) {
                uploadMessage.textContent = 'Erro: Nenhum usuário logado.';
                uploadMessage.style.display = 'block';
                return;
            }
            const newProfileName = profileNameInput.value;
            if (!newProfileName) {
                uploadMessage.textContent = 'O nome do perfil não pode ser vazio.';
                uploadMessage.style.display = 'block';
                return;
            }

            uploadMessage.textContent = 'Atualizando nome do perfil...';
            uploadMessage.style.display = 'block';
            uploadMessage.classList.remove('text-red-700', 'text-green-700');
            uploadMessage.classList.add('text-gray-700');

            const { error: updateError } = await supabase
                .from('profiles')
                .upsert({ id: user.id, full_name: newProfileName })
                .eq('id', user.id);

            if (updateError) {
                console.error(updateError);
                uploadMessage.textContent = `Erro ao atualizar nome do perfil: ${updateError.message}`;
                uploadMessage.classList.add('text-red-700');
            } else {
                userEmailDisplay.textContent = newProfileName;
                uploadMessage.textContent = 'Nome do perfil atualizado com sucesso!';
                uploadMessage.classList.add('text-green-700');
            }
        });

        function showDeleteConfirmationModal(id, type, name = '') {
            itemToDeleteInfo = { id, type };
            const messageEl = document.getElementById('delete-confirm-message');

            if (type === 'note') {
                messageEl.textContent = 'Tem a certeza que quer apagar esta nota?';
            } else if (type === 'custom_app_permanent') {
                messageEl.innerHTML = `Tem certeza que deseja excluir permanentemente o aplicativo "<strong>${name}</strong>"? <br>Esta ação não pode ser desfeita.`;
            }
            deleteConfirmModal.classList.remove('hidden');
            deleteConfirmModal.classList.add('flex');
        }

        function hideDeleteConfirmationModal() {
            itemToDeleteInfo = null;
            deleteConfirmModal.classList.add('hidden');
            deleteConfirmModal.classList.remove('flex');
        }

        confirmDeleteButton.addEventListener('click', async () => {
            if (!itemToDeleteInfo) return;

            const { id, type } = itemToDeleteInfo;
            const user = (await supabase.auth.getUser()).data.user;

            if (type === 'custom_app_permanent') {
                if (user) {
                    // 1. Delete from the database table
                    await supabase.from('custom_apps').delete().match({ id: id, user_id: user.id });

                    // 2. Remove from the 'removed_apps' list in preferences
                    const { data } = await supabase.from('profiles').select('preferences').eq('id', user.id).single();
                    const prefs = data?.preferences || {};
                    if (prefs.removed_apps) {
                        prefs.removed_apps = prefs.removed_apps.filter(appId => appId !== id);
                        await saveUserPreferences(prefs);
                    }

                    // 3. Refresh the trash list
                    await renderTrashList();
                }
            }
            hideDeleteConfirmationModal();
        });

        cancelDeleteButton.addEventListener('click', () => {
            hideDeleteConfirmationModal();
        });

        // --- EVENTOS DO MODAL DE CONFIGURAÇÕES ---

        // Código restante do modal de configurações também removido.

        // Toda a lógica de renderização, gestão e "drag-and-drop" de Apps foi removida.

        // Eventos e lógica de inicialização de Apps foram removidos.

        // --- VERIFICAÇÃO DE ESTADO DE AUTENTICAÇÃO E URL ---
        supabase.auth.onAuthStateChange((event, session) => {
            if (session) {
                // Só inicializa a app por completo se ainda não tiver sido feito para esta sessão.
                if (!isAppInitialized) {
                    isAppInitialized = true;

                    loadUserProfile(session.user);
                    // A chamada a loadUserPreferences() foi removida.
                    toggleUI(true);

                    // A subscrição para 'custom_apps' foi removida.

                    // --- Busca inicial de dados ---
                    // A chamada a fetchAndRenderApps() foi removida.
                    fetchUsers().then(fetchMessages);
                    subscribeToMessages();
                }
            } else { // Sem sessão ou o usuário saiu
                isAppInitialized = false; // Reinicia a flag

                // Limpa a subscrição de apps que já não existe
                if (customAppsSubscription) supabase.removeChannel(customAppsSubscription);
                customAppsSubscription = null;

                // Determina qual vista mostrar
                const params = new URLSearchParams(window.location.hash.substring(1));
                if (params.get('type') === 'recovery') {
                    toggleUI(false, 'new-password');
                } else {
                    toggleUI(false, 'login');
                }
            }
        });

    </script>
</body>
</html>
