-- APAGA AS TABELAS E FUNÇÕES ANTIGAS PARA UMA REINSTALAÇÃO LIMPA
DROP TABLE IF EXISTS public.chat_players CASCADE;
DROP TABLE IF EXISTS public.chat_rooms CASCADE;

-- Tabela para gerenciar as salas de chat
CREATE TABLE chat_rooms (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    room_code TEXT NOT NULL UNIQUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    host_id UUID NOT NULL REFERENCES auth.users(id)
);

-- Tabela para gerenciar os jogadores dentro de cada sala
CREATE TABLE chat_players (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    room_id BIGINT NOT NULL REFERENCES chat_rooms(id) ON DELETE CASCADE,
    player_id UUID NOT NULL REFERENCES auth.users(id),
    UNIQUE(room_id, player_id)
);

-- Habilitar Segurança em Nível de Linha (RLS)
ALTER TABLE chat_rooms ENABLE ROW LEVEL SECURITY;
ALTER TABLE chat_players ENABLE ROW LEVEL SECURITY;

-- Políticas de RLS para chat_rooms
CREATE POLICY "Allow authenticated users to create rooms"
ON chat_rooms FOR INSERT
WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Allow users in the room to see it"
ON chat_rooms FOR SELECT
USING (id IN (SELECT room_id FROM chat_players WHERE player_id = auth.uid()));

-- Políticas de RLS para chat_players
CREATE POLICY "Allow users to join a room"
ON chat_players FOR INSERT
WITH CHECK (auth.uid() = player_id);

CREATE POLICY "Allow players to see other players in the room"
ON chat_players FOR SELECT
USING (room_id IN (SELECT room_id FROM chat_players WHERE player_id = auth.uid()));

CREATE POLICY "Allow player to leave a room"
ON chat_players FOR DELETE
USING (auth.uid() = player_id);
